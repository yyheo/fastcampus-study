// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Seed Docs: https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding#how-to-seed-your-database-in-prisma-orm

// .env에 DATABASE_URL 설정 필요 (supabase 사용함)

// Prisma: Node.js 기반의 ORM(Object-Relational Mapping) 도구로, 데이터베이스와의 상호 작용을
// 단순화하고 개발 생산성을 높이는 데 도움을 주는 도구

// Supabase: 데이터베이스와 백엔드 인프라를 관리하는 복잡한 작업을 단순화하는 데 도움을 주는 오픈 소스 플랫폼. PostgreSQL으로 고급 데이터베이스 요구사항을 처리할 수 있음. 오픈 소스이며 커스터마이징 및 자체 호스팅 가능

// 마이그레이션:  npx prisma migrate dev --name init
// 잘 되었는지 확인: npx prisma stuido (supabase에서도 확인 가능)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Store {
  id        Int      @id @default(autoincrement())
  phone     String?  // tel_no
  address   String?  // rdn_code_nm
  lat       String?  // y_dnts
  lng       String?  // x_cnts
  name      String?  // upso_nm
  category  String?  // bizcnd_code_nm
  storeType String?  // cob_code_nm
  foodCertifyName String? // crtfc_gbn_nm
}


model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in   Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}